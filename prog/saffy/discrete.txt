# 이산수학(Discrete Mathematics)

  1. 이산수학이란?
    불연속적인 숫자를 다루는 수학.
    수학적 사고를 배양하는데 적합하다.
    이산수학의 내용이 자료구조, 알고리즘의 베이스가 되어 전체적인 컴퓨팅 사고력을 기르는데 도움이 된다.

  2. 명제와 연산자
    2-1. 명제란? 
      참,거짓으로 명확하게 나눌 수 있는 문장.
      여러 개의 명제를 조합할 수 있다.

    2-2. 6가지의 기본 연산자.
      - Not
      - And
      - or
      - Exclusive or (배타적 논리 합) (둘 중 하나'만' 참일 경우)
      - Implication (함축)(조건 명제)
      - Biconditional (쌍방 조건 명제) (두 값이 일치할 때, 둘 다 true거나, 둘다 false일 때 참)

    2-3 연습문제.
      (1) 명제 P가 '핸드폰은 돼지저금통이다.'(참) 일 때, 이것을 부정하고 진릿값을 구하세요.
        A: not P, true

      (2) 다음 두 명제의 논리곱 연산을 수행하고 진릿값을 구하세요.
          1+2=3 (참), 사람은 언젠가 죽는다.(참)
        A: P and Q로, true

      (3) 다음 두 명제의 논리합 연산을 수행하고 진릿값을 구하세요.
          모든 사람은 여자다(false),  2는 짝수다.(참)
        A: P or Q, true

      (4) 다음 두 명제의 베타적 논리합 연산을 수행하고 진릿값을 구하세요.
          5는 3보다 크다 (참),  3은 1보다 크다.(참)
        A: P exclusive or Q, false

      (5) 다음 조건명제에 대한 진릿값을 구하세요.
          '원숭이가 동물이면 파리는 동물이다.'
        A: true
      (6) 조건명제 p -> q의 진리표 작성하세요.
        A:  p  q  p->q
            T  T   T
            T  F   F
            F  T   T 왜....?
            F  F   T

  3. 역, 이, 대우
    3-1. 역,이,대우 란?
      조건명제에서 사용
      하나의 명제를 변형해서 표현
      증명하기 어려운 명제는 대우를 이용해 증명 가능

      역: p와 q의 위치 바꾸기
      이: p와 q에 Not 붙이기
      대우: 역+이, 두 위치를 바꾸고 Not 붙이기.
    
    3-2. 연습문제.

      (1) 명제 '30이 10보다 크다면, 30은 50보다 작다.'에 대해 진릿값, 역,이 대우 및 각각의 진릿값을 구하시오.
        진릿값: T -> T   T
        역: 30은 50보다 작다면, 30이 10보다 크다, T => T   T
        이: 30이 10보다 크지 않다면, 30은 50보다 크다. F -> F   T
        대우: 30이 50보다 크다면, 30은 10보다 크지 않다. F => F   T
  
  4. 동치
    4-1. 동치란?
      논리적으로 일치한다.
      흔히 같은 의미의 더 쉬운 명제를 발견하기 위해 사용한다.
      동치를 이용해 복잡해 보이는 합성명제도 간단한 명제로 바꿀 수 있다.
    
    4-2. 여러 등치 법칙의 종류
      (1) 멱등 법칙
        P or P   =>   P
        P and P   =>   P
        
      (2) 교환 법칙
        P or Q   =>   Q or P
        P and Q   =>   Q and P

      (3) 드모르간의 법칙
        Not(P and Q)   =>   Not P or Not Q
        Not(P or Q)   =>   Not P and Not Q

      (4) 흡수 법칙
        P or (P and Q)   =>   괄호의 값과 관계없이 바깥의 P의 값에 흡수된다.
        P and (P or Q)   =>   괄호의 값과 관계없이 바깥의 P의 값에 흡수된다.
      
      (5) 부정 법칙
        P or Not P   =>   T
        P and Not P   =>   F

      (6) 함축 법칙  --------------------------------------------- ******
        P 이면 Q이다.   =>   Not P or Q이다.
    
    4-3. 연습문제.
      (1) (P -> Q) and (P -> notQ) 를 간소화하라.
          (notP or Q) and (notP or notQ)  => 함축 법칙
          notP or (Q and notQ)  =>  분배 법칙
          notP or F  =>  부정 법칙 
          notP => 항등 법칙

      (2) not(P or notQ) or (notP and notQ) === notP. 이 명제는 동치인가?
          (notP and Q) or (notP and notQ)  =>  드모르간 법칙
          notP and (Q or notQ)  =>  분배 법칙
          notP and T  =>  부정 법칙
          notP  => 항등 법칙


