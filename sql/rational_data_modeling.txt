---------------------------------------------------------------------- 관계형 데이터 모델링
순서
업무 파악 => 개념적 데이터 모델링 => 논리적 데이터 모델링 => 물리적 데이터 모델링

---------------------------------------  개념적 데이터 모델링
Entity Relationship Diagram
3가지 유형
정보(속성), 그룹, 관계

순서
Entity 추출 => Attribute 정의 => 식별자 지정(Primary Key)
=> Relationship 설정 (Foriegn Key 키 사용) => Cardinality, Optionality 설정

--------------------  관계(Relation)
표에서 기본키(Primary Key), 외래키(Foriegn Key)로 표현된다.

--------------------  그룹 (Entity)
테이블이 된다.
1. RDB(관계형 데이터베이스)는 내포관계를 허용하지 않는다.
2. 거대 단일 테이블은 중복이 발생한다.
따라서 주제에 따라 데이터를 그룸핑한다.

--------------------  정보(Attribute)
테이블에서 column의 이름이 된다.

--------------------  Key
후보키(Candidate Key) 중에서
기본키(Primary Key) 를 선택하고 나머지가
대체키(Alternate Key) , 대체키는 이후 secondary index가 되기도 한다.

가끔씩 하나의 키로 불가능한 상황이 있다.
예를 들면 직원 번호, 부서 번호가 서로 중복될 경우
즉, 여러 부서에 속하는 직원이 있고, 하나의 부서에 여러 직원이 있을 경우 하나의 키로는 불가능하다.
중복키(composite key) 사용

--------------------  Cardinality, Optionality
Cardinality는 각 Entity 간의 관계를 나타낸다.
1 대 1 관계, 1 대 N 관계, N 대 N 관계

Optionality는 옵션과 필수 관계
Mandatory와 Optional


---------------------------------------  논리적 데이터 모델링
Mapping Rule
Entity => Table
Attribute => Column
Relation => Primary Key, Foriegn Key

Primary Key와 Foriegn Key를 각 Table에 추가함으로써 Table 간 관계를 표현한다.

n 대 n 관계의 테이블을 중재자(Mapping Table)가 필요하다.

-------------------- 정규화 Normalization
UNF부터 6NF까지 총 11개의 정규화 단계가 있다.
산업적으로 가장 잘 사용되는 것은 3NF다.

 제 1정규화
Atomic columns
하나의 column에는 오로지 하나의 값이 있어야 한다.

 제 2정규화
No partial dependencies
중복되는 부분이 있다면 해당 column들의 의존성을 찾아보고  분리시켜 중복을 해결한다.
(실제로 하긴 좀 어렵긴 하겠다.)

 제 3정규화
No transitive dependencies
이행적 종속성??

중복되는 부분들의 종속성을 찾아낸는 것이 중요해보인다.
솔직히 뭐가 다른지 모르겠어...

---------------------------------------  물리적 데이터 모델링
구체적이고 제품에 맞는 현실적인 표로 만드는 것.
성능이 중요시 된다.

느려지는 부분을 찾았다면 성능을 향상시킬 방법을 찾자.
최후의 방법은 역정규화(denormalization)

Index 추가, Application에서의 캐시 이용

--------------------  역정규화(denormalization)
대체로 읽기를 위해 쓰기를 희생하는 것
반대로 정규화는 쓰기를 위해 읽기를 희생하는 것
이유는?
표를 분리하면 이후에 JOIN이 필요하다.
JOIN은 매우 비싼 과정이기 때문.

정해진 공정을 순차적으로 진행하는 정규화와 달리
역정규화는 상황에 맞게 이루어진다.

JOIN 줄이기
= 중복 허용하기

한 column의 데이터 크기가 다른 column과 비교가 안될 정도로 크다면,
그 column을 제외한 표를 만들기.

row가 매우 많다면 구역별로 쪼갤 수 있다.
예를 들면, row의 갯수가 1000일 때,
100개씩 10개로 나뉘어있다면, 조회 시간을 줄일 수 있다.

Mapping Table에
JOIN이 자주 일어나는 column을 미리 만들어 놓는다.
